{"version":3,"sources":["JA Logo.svg","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Navbar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","currentScrollHeight","_this2","window","onscroll","setState","scrollY","opacity","Math","min","react_default","a","createElement","style","id","cjs","x","src","logo","className","alt","React","Component","App","scrollPane","createRef","onClick","bind","assertThisInitialized","console","log","current","getScrollPosition","_sticky","sticky","position","defineProperty","zIndex","components_Navbar","href","dir","lib_default","Fade_default","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,0RC8BzBC,cAzBb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CAAEC,oBAAqB,GAFnBR,mFAKC,IAAAS,EAAAN,KAClBO,OAAOC,SAAW,WAChBF,EAAKG,SAAS,CAAEJ,oBAAqBE,OAAOG,4CAK9C,IAAMC,EAAUC,KAAKC,IAAI,IAAMb,KAAKI,MAAMC,oBAAqB,GAC/D,OACES,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEN,WAAWO,GAAG,QAC1BJ,EAAAC,EAAAC,cAACG,EAAA,SAAD,CAAUC,EAAG,CAAC,OAAQ,SACpBN,EAAAC,EAAAC,cAAA,OAAKK,IAAKC,IAAMC,UAAU,WAAWC,IAAI,mBAlBhCC,IAAMC,2DCyDZC,cAnDb,SAAAA,EAAY/B,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA2B,IACjB9B,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA6B,GAAAxB,KAAAH,KAAMJ,KACDgC,WAAaH,IAAMI,YACxBhC,EAAKiC,QAAUjC,EAAKiC,QAAQC,KAAbjC,OAAAkC,EAAA,EAAAlC,CAAAD,IAHEA,yEAOjBoC,QAAQC,IAAIlC,KAAK4B,WAAWO,QAAQC,sDAG7B,IAAAC,EACDC,GAAMD,EAAA,CACVE,SAAU,kBADAzC,OAAA0C,EAAA,EAAA1C,CAAAuC,EAAA,WAEA,UAFAvC,OAAA0C,EAAA,EAAA1C,CAAAuC,EAAA,MAGL,GAHKvC,OAAA0C,EAAA,EAAA1C,CAAAuC,EAAA,UAID,CAAEI,OAAQ,MAJTJ,GAMZ,OACEvB,EAAAC,EAAAC,cAACG,EAAA,iBAAD,KACEL,EAAAC,EAAAC,cAAA,OAAKO,UAAU,OACbT,EAAAC,EAAAC,cAAA,OAAKO,UAAU,SAASN,MAAOqB,GAC7BxB,EAAAC,EAAAC,cAAC0B,EAAD,OAGF5B,EAAAC,EAAAC,cAAA,KAAG2B,KAAK,SAAR,gBACA7B,EAAAC,EAAAC,cAAA,KAAG2B,KAAK,aAAR,qBACA7B,EAAAC,EAAAC,cAAA,OAAKO,UAAU,YAAYqB,IAAI,OAC7B9B,EAAAC,EAAAC,cAAC6B,EAAA9B,EAAD,CAAkBG,GAAI,QACpBJ,EAAAC,EAAAC,cAAA,QAAMO,UAAU,wCAAhB,SAEET,EAAAC,EAAAC,cAAA,aAGJF,EAAAC,EAAAC,cAAC8B,EAAA/B,EAAD,KACED,EAAAC,EAAAC,cAAA,OAAKO,UAAY,WAInBT,EAAAC,EAAAC,cAAC6B,EAAA9B,EAAD,CAAkBG,GAAI,YACpBJ,EAAAC,EAAAC,cAAA,QAAMO,UAAU,wCACb,IADH,sBAEqBT,EAAAC,EAAAC,cAAA,uBA1CjBS,IAAMC,WCGJqB,QACW,cAA7BxC,OAAOyC,SAASC,UAEe,UAA7B1C,OAAOyC,SAASC,UAEhB1C,OAAOyC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7c357b12.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/JA Logo.6284c2a8.svg\";","import React from \"react\";\r\nimport logo from \"../JA Logo.svg\";\r\nimport { Parallax } from \"react-scroll-parallax\";\r\n\r\nclass Navbar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { currentScrollHeight: 0 };\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.onscroll = () => {\r\n      this.setState({ currentScrollHeight: window.scrollY });\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const opacity = Math.min(100 / this.state.currentScrollHeight, 1);\r\n    return (\r\n      <div>\r\n        <div style={{ opacity }} id=\"logo\">\r\n          <Parallax x={[\"100%\", \"-41%\"]}>\r\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          </Parallax>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport Typing from \"react-typing-animation\";\nimport { CSSTransitionGroup } from \"react-transition-group\"; // ES6\nimport Fade from \"react-reveal/Fade\";\nimport ScrollableAnchor from \"react-scrollable-anchor\";\nimport { ParallaxProvider,Parallax } from 'react-scroll-parallax';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.scrollPane = React.createRef();\n    this.onClick = this.onClick.bind(this);\n  }\n\n  onClick() {\n    console.log(this.scrollPane.current.getScrollPosition());\n  }\n\n  render() {\n    const sticky = {\n      position: \"-webkit-sticky\",\n      position: \"sticky\",\n      top: 0,\n      overlay: { zIndex: 1000 }\n    };\n    return (\n      <ParallaxProvider>\n        <div className=\"App\">\n          <div className=\"Header\" style={sticky}>\n            <Navbar />\n          </div>\n\n          <a href=\"#home\"> Go to home </a>\n          <a href=\"#section2\"> Go to section 2 </a>\n          <div className=\"ms-Fabric\" dir=\"ltr\">\n            <ScrollableAnchor id={\"home\"}>\n              <span className=\"ms-font-su ms-fontColor-themePrimary\">\n                Hello.\n                <br />\n              </span>\n            </ScrollableAnchor>\n            <Fade>\n              <div className = \"panel\">\n              </div>\n            </Fade>\n\n            <ScrollableAnchor id={\"section2\"}>\n              <span className=\"ms-font-su ms-fontColor-themePrimary\">\n                {\" \"}\n                How are you world? <br />\n              </span>\n            </ScrollableAnchor>\n          </div>\n        </div>\n      </ParallaxProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}