{"version":3,"sources":["App.js","serviceWorker.js","index.js","JA_Logo.svg","images/IMG_3336.jpg","images/arlington.png"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","scrollPane","React","createRef","layers","image","BG","amount","FG","react_default","a","createElement","cjs","Fade_default","className","styles","bannerContainer","bannerBg","style","height","color","src","Logo","alt","fill","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"6VAqEeA,sBAtDb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,WAAaC,IAAMC,YAFPT,wEAMjB,IAAMU,EAAS,CACb,CACEC,MAAOC,IACPC,OAAQ,IAEV,CACEF,MAAOG,IACPD,OAAQ,KAGZ,OACEE,EAAAC,EAAAC,cAACC,EAAA,iBAAD,KACEH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,KACED,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,YACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAWC,IAAOC,iBACrBP,EAAAC,EAAAC,cAACC,EAAA,eAAD,CACEE,UAAWC,IAAOE,SAClBb,OAAQA,EACRc,MAAO,CAAEC,OAAQ,UAEjBV,EAAAC,EAAAC,cAAA,QACEG,UAAU,mCACVI,MAAO,CAAEE,MAAO,UAEhBX,EAAAC,EAAAC,cAAA,OACEU,IAAKC,IACLC,IAAKD,IACLJ,MAAO,CAAEC,OAAQ,OAAQK,KAAM,WAGjCf,EAAAC,EAAAC,cAAA,MAAIO,MAAO,CAAEE,MAAO,UAApB,iBACAX,EAAAC,EAAAC,cAAA,qCAGJF,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACEH,EAAAC,EAAAC,cAAA,OAAKU,IAAKC,IAAMC,IAAKD,IAAMJ,MAAO,CAAEC,OAAQ,uBA3C5CjB,IAAMuB,YCFJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB,wDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,yDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.4d1ad1af.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport Typing from \"react-typing-animation\";\nimport { CSSTransitionGroup } from \"react-transition-group\"; // ES6\nimport Fade from \"react-reveal/Fade\";\nimport ScrollableAnchor from \"react-scrollable-anchor\";\nimport { StickyContainer, Sticky } from \"react-sticky\";\nimport { ParallaxProvider, ParallaxBanner, Parallax} from \"react-scroll-parallax\";\nimport BG from \"./images/IMG_3336.jpg\";\nimport FG from \"./images/arlington.png\";\nimport Logo from \"./JA_Logo.svg\";\nimport styles from \"./ParallaxBanner.scss\";\nimport \"./styles.scss\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.scrollPane = React.createRef();\n  }\n\n  render() {\n    const layers = [\n      {\n        image: BG,\n        amount: 0.6\n      },\n      {\n        image: FG,\n        amount: 0.2\n      }\n    ];\n    return (\n      <ParallaxProvider>\n        <Fade>\n          <div className=\"App\">\n            <div className=\"vertical\">\n              <div className={styles.bannerContainer}>\n                <ParallaxBanner\n                  className={styles.bannerBg}\n                  layers={layers}\n                  style={{ height: \"100vh\" }}\n                >\n                  <span\n                    className=\"ms-fontSize-68  parallaxChildren\"\n                    style={{ color: \"white\" }}\n                  >\n                    <img\n                      src={Logo}\n                      alt={Logo}\n                      style={{ height: \"50vh\", fill: \"green\" }}\n                    />\n\n                    <h1 style={{ color: \"black\" }}>Joseph Antony</h1>\n                    <h5>An interactive resume</h5>\n                  </span>\n                </ParallaxBanner>\n                <Parallax>\n                  <img src={Logo} alt={Logo} style={{ height: \"20vh\" }} />\n                </Parallax>\n\n              </div>\n            </div>\n          </div>\n        </Fade>\n      </ParallaxProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/JA_Logo.6284c2a8.svg\";","module.exports = __webpack_public_path__ + \"static/media/IMG_3336.0bfd2fd9.jpg\";","module.exports = __webpack_public_path__ + \"static/media/arlington.a3343b85.png\";"],"sourceRoot":""}